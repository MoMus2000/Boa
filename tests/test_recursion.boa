import math

fun factorial(n) {
  if (n == 0) {
    return 1.0; // Base case
  } else {
    return n * factorial(n - 1); // Recursive step
  }
}

var a = factorial(0);
assert(a == 1, "Expected 1, but got " + a);
var a = factorial(1);
assert(a == 1, "Expected 1, but got " + a);
var a = factorial(5);
assert(a == 120, "Expected 120, but got " + a);
var a = factorial(10);
assert(a == 3628800, "Expected 3628800, but got " + a);

fun fibonacci(n) {
  if (n <= 1) {
    return n; // Base cases
  } else {
    return fibonacci(n - 1) + fibonacci(n - 2); // Recursive step
  }
}

assert(fibonacci(0) == 0, "Expected 0 but got " + fibonacci(0));
assert(fibonacci(1) == 1, "Expected 0 but got " + fibonacci(1));
assert(fibonacci(2) == 1, "Expected 0 but got " + fibonacci(2));
assert(fibonacci(10)== 55,"Expected 0 but got " + fibonacci(10));

